/*******************************************************************************
 * Copyright (c) 2022 Mgnite Inc. All rights reserved.
 *
 * Author:
 *    Hisashi Miyashita <himi@mgnite.com>
 *******************************************************************************/

package org.eclipse.xtext.web.server.outline;

import java.text.MessageFormat;

import com.google.common.xml.XmlEscapers;

public class OutlineElement {

    /* jsTree JSON format:
     * {
     *   id          : "string" // will be autogenerated if omitted
     *   text        : "string" // node text
     *   icon        : "string" // string for custom
     *   state       : {
     *       opened    : boolean  // is the node open
     *       disabled  : boolean  // is the node disabled
     *       selected  : boolean  // is the node selected
     *   },
     *   children    : []  // array of strings or objects
     *   li_attr     : {}  // attributes for the generated LI node
     *   a_attr      : {}  // attributes for the generated A node
     * }
     */

    public final String id;
    public final String text;
    public final OutlineElement[] children;
    public final Integer start, end;
    public final Integer line, offset, length;

    private static int code(Object o) {
        if (o == null) return 0;
        return o.hashCode();
    }

    private static boolean equal(Object o1, Object o2) {
        if (o1 == null) {
            return o2 == null;
        }
        return o1.equals(o2);
    }

    public int hashCode() {
        int val =  (code(id)
                    ^ code(text) 
                    ^ code(start)
                    ^ code(end)
                    ^ code(line)
                    ^ code(offset)
                    ^ code(length));
        if (children == null) return val;
        for (OutlineElement oe: children) {
            val ^= oe.hashCode();
        }
        return val;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OutlineElement)) return false;
        OutlineElement oe = (OutlineElement) o;

        if (!equal(id, oe.id)) return false;
        if (!equal(text, oe.text)) return false;
        if (!equal(start, oe.start)) return false;
        if (!equal(end, oe.end)) return false;
        if (!equal(line, oe.line)) return false;
        if (!equal(offset, oe.offset)) return false;
        if (!equal(length, oe.length)) return false;

        if (children == null) {
            return oe.children == null;
        }
        if (children.length != oe.children.length) return false;
        for (int i = 0; i < children.length; i++) {
            if (!equal(children[i], oe.children[i])) return false;
        }
        
        return true;
    }

    private static String str(String s) {
        return s == null ? "" : s;
    }

    private static final MessageFormat mf = new MessageFormat("{2} {0} {4} {3} {1} {5}");

    public OutlineElement(String label, String className,
                          String labelPre, String classNamePre,
                          String labelPost, String classNamePost,
                          String href,
                          Integer start, Integer end,
                          Integer line, Integer offset, Integer length,
                          OutlineElement[] children) {
        String text = mf.format(new Object[] {
            str(label), str(className),
            str(labelPre), str(classNamePre),
            str(labelPost), str(classNamePost)
        });
        this.text = XmlEscapers.xmlContentEscaper().escape(text);

        this.id = href;

        this.start = start;
        this.end = end;
        this.line = line;
        this.offset = offset;
        this.length = length;
        this.children = children;
    }
}
